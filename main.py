#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ VPN –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
MVP –≤–µ—Ä—Å–∏—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É KISS
"""

import logging
import sqlite3
import os
import secrets
import string
import subprocess
from datetime import datetime, timedelta
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from logging.handlers import RotatingFileHandler

# ========================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø MVP (–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ –∫–æ–¥–µ)
# ========================================

# –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏!
BOT_TOKEN = "8244782584:AAG5UOUK-X12MoLMfBkKE53yj-hNTur3IkY"  # –ü–æ–ª—É—á–∏—Ç—å –æ—Ç @BotFather
ADMIN_USERNAME = "@pervld"  # –í–∞—à –ª–æ–≥–∏–Ω –≤ Telegram

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
DATABASE_FILE = "users.db"
PAYMENT_REMINDER_DAYS = 3  # –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å
CHECK_TIME_HOUR = 10  # –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (10:00)
PAYMENT_PERIOD_DAYS = 30  # –ü–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã (30 –¥–Ω–µ–π)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã
PAYMENT_AMOUNT = "50 —Ä—É–±–ª–µ–π"
PAYMENT_LINK = "https://www.tbank.ru/cf/UbKjn3J4eD"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
ADMIN_CHAT_ID = 526829525  # –í–∞—à Telegram ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
AMNEZIA_BASE_DIR = "/opt/amnezia"
OPENVPN_CONFIG_DIR = "/opt/amnezia/openvpn"  
XRAY_CONFIG_DIR = "/opt/amnezia/xray"

# ========================================
# –ü–†–ï–î–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø (–±–µ–∑ LLM)
# ========================================

MESSAGES = {
    'welcome': (
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Payment Bot!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ VPN —Å–µ—Ä–≤–∏—Å–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É."
    ),
    'registration_success': (
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ 3 –¥–Ω—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞.\n"
        f"–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: {{next_payment_date}}"
    ),
    'already_registered': (
        "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
        f"–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: {{next_payment_date}}"
    ),
    'payment_reminder': (
        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ VPN!\n\n"
        "–ß–µ—Ä–µ–∑ 3 –¥–Ω—è ({due_date}) –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
        "üí∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤–æ–≤—Ä–µ–º—è.\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü."
    ),
    'payment_due': (
        "üö® –°–†–û–ß–ù–û: –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã VPN –∏—Å—Ç–µ–∫!\n\n"
        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {{due_date}}.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
    ),
    'help': (
        f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        f"‚Ä¢ /my_profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ\n"
        f"‚Ä¢ /extend - –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ–ø–ª–∞—Ç–µ)\n"
        f"‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        f"üìû –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {ADMIN_USERNAME}"
    ),
    'payment_instruction': (
        "üí≥ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:\n\n"
        "üí∞ –°—É–º–º–∞: {amount}\n"
        "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_link}\n\n"
        "‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É:\n"
        "üìù \"{payment_comment}\"\n\n"
        "üïê –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞."
    ),
    'admin_payment_notification': (
        "üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ VPN!\n\n"
        "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
        "üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {current_due_date}\n"
        "üìã –û–∂–∏–¥–∞–µ–º—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \"{payment_comment}\"\n\n"
        "‚ÑπÔ∏è –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–æ–π:\n"
        "/confirm_payment {user_id}"
    ),
    'not_registered': (
        "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é.\n"
        "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )
}

# ========================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø
# ========================================

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –≤–∏–¥–µ–Ω–∏—é"""
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ (10MB, 3 —Ñ–∞–π–ª–∞)
    file_handler = RotatingFileHandler(
        'bot.log', 
        maxBytes=10*1024*1024,  # 10MB
        backupCount=3,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    
    # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

# ========================================
# –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
# ========================================

def init_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            telegram_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            registration_date DATE NOT NULL,
            payment_due_date DATE NOT NULL,
            is_active BOOLEAN DEFAULT 1
        )
    ''')
    
    conn.commit()
    conn.close()
    logging.info("Database initialized successfully")

def register_user(telegram_id: int, username: str) -> bool:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, False –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    """
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (telegram_id,))
        if cursor.fetchone():
            conn.close()
            return False
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        registration_date = datetime.now().date()
        payment_due_date = registration_date + timedelta(days=PAYMENT_PERIOD_DAYS)
        
        cursor.execute('''
            INSERT INTO users (telegram_id, username, registration_date, payment_due_date)
            VALUES (?, ?, ?, ?)
        ''', (telegram_id, username, registration_date, payment_due_date))
        
        conn.commit()
        conn.close()
        
        logging.info(f"New user registered: {telegram_id} (@{username})")
        return True
        
    except sqlite3.Error as e:
        logging.error(f"Database error during registration: {e}")
        conn.close()
        return False

def get_user_payment_date(telegram_id: int) -> Optional[datetime]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    cursor.execute('SELECT payment_due_date FROM users WHERE telegram_id = ?', (telegram_id,))
    result = cursor.fetchone()
    conn.close()
    
    if result:
        return datetime.strptime(result[0], '%Y-%m-%d').date()
    return None

def get_users_for_reminder() -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    # –î–∞—Ç–∞ —á–µ—Ä–µ–∑ PAYMENT_REMINDER_DAYS –¥–Ω–µ–π
    reminder_date = (datetime.now().date() + timedelta(days=PAYMENT_REMINDER_DAYS)).strftime('%Y-%m-%d')
    
    cursor.execute('''
        SELECT telegram_id, username, payment_due_date 
        FROM users 
        WHERE payment_due_date = ? AND is_active = 1
    ''', (reminder_date,))
    
    users = cursor.fetchall()
    conn.close()
    
    return users

def generate_payment_comment(telegram_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞—Ç–∞–º–∏"""
    current_payment_date = get_user_payment_date(telegram_id)
    if not current_payment_date:
        return "VPN –ø–æ–¥–ø–∏—Å–∫–∞, –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç {}".format(datetime.now().date().strftime('%d.%m.%Y'))
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
    period_start = current_payment_date
    period_end = current_payment_date + timedelta(days=PAYMENT_PERIOD_DAYS)
    
    # –î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–¥–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞)
    agreement_date = datetime.now().date()
    
    comment = "VPN –ø–æ–¥–ø–∏—Å–∫–∞ [{}-{}], –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç [{}]".format(
        period_start.strftime('%d.%m.%Y'),
        period_end.strftime('%d.%m.%Y'),
        agreement_date.strftime('%d.%m.%Y')
    )
    
    return comment

def get_all_users_with_status() -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–ª–∞—Ç—ã"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT telegram_id, username, registration_date, payment_due_date, is_active 
        FROM users 
        ORDER BY payment_due_date ASC
    ''')
    
    users = cursor.fetchall()
    conn.close()
    
    users_data = []
    
    for telegram_id, username, reg_date, payment_date_str, is_active in users:
        from datetime import datetime, timedelta
        
        try:
            payment_date = datetime.strptime(payment_date_str, '%Y-%m-%d').date()
            days_until_payment = (payment_date - datetime.now().date()).days
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
            if not is_active:
                status_emoji = "‚ö´"
                status_text = "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            elif days_until_payment <= 0:
                status_emoji = "üî¥"
                status_text = f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_until_payment)} –¥–Ω."
            elif days_until_payment <= 3:
                status_emoji = "üü°"
                status_text = f"–û—Å—Ç–∞–ª–æ—Å—å {days_until_payment} –¥–Ω."
            else:
                status_emoji = "üü¢"
                status_text = f"–û—Å—Ç–∞–ª–æ—Å—å {days_until_payment} –¥–Ω."
            
            users_data.append({
                'telegram_id': telegram_id,
                'username': username or '',
                'registration_date': reg_date,
                'payment_date': payment_date.strftime('%d.%m.%Y'),
                'days_until_payment': days_until_payment,
                'status_emoji': status_emoji,
                'status_text': status_text,
                'is_active': is_active
            })
            
        except ValueError as e:
            logging.error(f"Error parsing payment date for user {telegram_id}: {e}")
            users_data.append({
                'telegram_id': telegram_id,
                'username': username or '',
                'registration_date': reg_date,
                'payment_date': payment_date_str,
                'days_until_payment': 0,
                'status_emoji': "‚ùå",
                'status_text': "–û—à–∏–±–∫–∞ –¥–∞—Ç—ã",
                'is_active': is_active
            })
    
    return users_data

def get_user_profile_info(telegram_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT username, registration_date, payment_due_date, is_active 
        FROM users 
        WHERE telegram_id = ?
    ''', (telegram_id,))
    
    result = cursor.fetchone()
    conn.close()
    
    if result:
        return {
            'username': result[0],
            'registration_date': result[1],
            'payment_due_date': result[2],
            'is_active': bool(result[3])
        }
    return None

def update_user_payment_date(telegram_id: int) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã
        cursor.execute('SELECT payment_due_date FROM users WHERE telegram_id = ?', (telegram_id,))
        result = cursor.fetchone()
        
        if not result:
            conn.close()
            return False
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã (—á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π)
        current_due_date = datetime.strptime(result[0], '%Y-%m-%d').date()
        next_due_date = current_due_date + timedelta(days=PAYMENT_PERIOD_DAYS)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –±–∞–∑–µ
        cursor.execute('''
            UPDATE users 
            SET payment_due_date = ? 
            WHERE telegram_id = ?
        ''', (next_due_date.strftime('%Y-%m-%d'), telegram_id))
        
        conn.commit()
        conn.close()
        
        logging.info(f"Updated payment date for user {telegram_id}: {current_due_date} -> {next_due_date}")
        return True
        
    except sqlite3.Error as e:
        logging.error(f"Database error updating payment date for {telegram_id}: {e}")
        conn.close()
        return False

# ========================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ë–û–¢–ê
# ========================================

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")],
        [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("üÜî –ú–æ–π ID", callback_data="getid")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
    user = update.effective_user
    username = user.username or "Unknown"
    
    logging.info(f"Start command from user {user.id} (@{username})")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_new_user = register_user(user.id, username)
    
    keyboard = get_main_keyboard()
    
    if is_new_user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂–∞
        payment_date = get_user_payment_date(user.id)
        welcome_message = (
            f"{MESSAGES['welcome']}\n\n"
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: {payment_date.strftime('%d.%m.%Y')}"
        )
        await update.message.reply_text(welcome_message, reply_markup=keyboard)
        logging.info(f"New user auto-registered: {user.id} (@{username})")
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await update.message.reply_text(MESSAGES['welcome'], reply_markup=keyboard)

async def my_profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_profile - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ"""
    user = update.effective_user
    
    logging.info(f"My profile command from user {user.id} (@{user.username})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    payment_date = get_user_payment_date(user.id)
    keyboard = get_main_keyboard()
    
    if not payment_date:
        await update.message.reply_text(MESSAGES['not_registered'], reply_markup=keyboard)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = get_user_profile_info(user.id)
    
    if user_info:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–æ –æ–ø–ª–∞—Ç—ã
        from datetime import datetime, timedelta
        days_until_payment = (payment_date - datetime.now().date()).days
        
        if days_until_payment <= 0:
            status_emoji = "üî¥"
            status_text = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞"
        elif days_until_payment <= 3:
            status_emoji = "üü°"
            status_text = f"–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {days_until_payment} –¥–Ω."
        else:
            status_emoji = "üü¢"
            status_text = f"–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {days_until_payment} –¥–Ω."
        
        profile_message = (
            f"üë§ **–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
            f"üÜî **ID:** {user.id}\n"
            f"üë§ **–õ–æ–≥–∏–Ω:** @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user_info['registration_date']}\n"
            f"üí≥ **–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞:** {payment_date.strftime('%d.%m.%Y')}\n"
            f"{status_emoji} **–°—Ç–∞—Ç—É—Å:** {status_text}\n\n"
            f"üí∞ **–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã:** {PAYMENT_AMOUNT}"
        )
        
        await update.message.reply_text(profile_message, reply_markup=keyboard, parse_mode='Markdown')
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ", 
            reply_markup=keyboard
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user = update.effective_user
    
    logging.info(f"Help command from user {user.id} (@{user.username})")
    
    keyboard = get_main_keyboard()
    await update.message.reply_text(MESSAGES['help'], reply_markup=keyboard)

async def test_admin_notification_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    try:
        test_message = (
            "üîî **–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
            "‚úÖ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
            f"üÜî –í–∞—à ID: {user.id}\n"
            f"üë§ Username: @{user.username}\n\n"
            "üí≥ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –Ω–∞ –æ–ø–ª–∞—Ç—É."
        )
        
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=test_message,
            parse_mode='Markdown'
        )
        
        logging.info(f"Admin notification test successful for admin {user.id}")
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}\n\n"
            "üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ /start"
        )
        logging.error(f"Failed to send admin test notification: {e}")

async def list_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    try:
        users_data = get_all_users_with_status()
        
        if not users_data:
            await update.message.reply_text(
                "üìä **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
                "üòÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç!",
                parse_mode='Markdown'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        message = "üìä **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        
        total_users = len(users_data)
        active_users = sum(1 for user in users_data if user['status_emoji'] == 'üü¢')
        warning_users = sum(1 for user in users_data if user['status_emoji'] == 'üü°')
        overdue_users = sum(1 for user in users_data if user['status_emoji'] == 'üî¥')
        
        message += (
            f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_users}\n"
            f"‚Ä¢ üü° –ù—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å: {warning_users}\n"
            f"‚Ä¢ üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {overdue_users}\n\n"
        )
        
        message += "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        
        for i, user_data in enumerate(users_data, 1):
            username_display = f"@{user_data['username']}" if user_data['username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            message += (
                f"{i}. {user_data['status_emoji']} `{user_data['telegram_id']}` {username_display}\n"
                f"   üìÖ –û–ø–ª–∞—Ç–∞: {user_data['payment_date']} ({user_data['status_text']})\n\n"
            )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(message) > 4000:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
            stats_message = (
                f"üìä **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
                f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"‚Ä¢ üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_users}\n"
                f"‚Ä¢ üü° –ù—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å: {warning_users}\n"
                f"‚Ä¢ üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {overdue_users}"
            )
            await update.message.reply_text(stats_message, parse_mode='Markdown')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Å—Ç—è–º
            user_chunks = [users_data[i:i + 10] for i in range(0, len(users_data), 10)]
            
            for chunk_num, chunk in enumerate(user_chunks, 1):
                chunk_message = f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—á–∞—Å—Ç—å {chunk_num}/{len(user_chunks)}):**\n\n"
                
                start_index = (chunk_num - 1) * 10
                for j, user_data in enumerate(chunk, start_index + 1):
                    username_display = f"@{user_data['username']}" if user_data['username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
                    
                    chunk_message += (
                        f"{j}. {user_data['status_emoji']} `{user_data['telegram_id']}` {username_display}\n"
                        f"   üìÖ –û–ø–ª–∞—Ç–∞: {user_data['payment_date']} ({user_data['status_text']})\n\n"
                    )
                
                await update.message.reply_text(chunk_message, parse_mode='Markdown')
        else:
            await update.message.reply_text(message, parse_mode='Markdown')
        
        logging.info(f"Admin {user.id} requested user list - {total_users} users displayed")
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}"
        )
        logging.error(f"Failed to get user list for admin {user.id}: {e}")

async def get_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID"""
    user = update.effective_user
    
    admin_status = "üî¥ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user.id == ADMIN_CHAT_ID:
        admin_status = "üü¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    message = (
        f"üÜî –í–∞—à Telegram ID: `{user.id}`\n"
        f"üë§ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üîë –°—Ç–∞—Ç—É—Å: {admin_status}\n\n"
        f"üìù –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ: `{user.id}`"
    )
    
    if user.id == ADMIN_CHAT_ID:
        message += "\n\nüîî –ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_admin"
    
    keyboard = get_main_keyboard()
    await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
    logging.info(f"ID request from user {user.id} (@{user.username})")   

async def extend_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extend - –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = update.effective_user
    
    logging.info(f"Extend command from user {user.id} (@{user.username})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    current_payment_date = get_user_payment_date(user.id)
    if not current_payment_date:
        keyboard = get_main_keyboard()
        await update.message.reply_text(MESSAGES['not_registered'], reply_markup=keyboard)
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–ø–ª–∞—Ç—ã
    payment_comment = generate_payment_comment(user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_message = MESSAGES['payment_instruction'].format(
        amount=PAYMENT_AMOUNT,
        payment_link=PAYMENT_LINK,
        payment_comment=payment_comment
    )
    keyboard = get_main_keyboard()
    await update.message.reply_text(user_message, reply_markup=keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        admin_message = MESSAGES['admin_payment_notification'].format(
            username=user.username or "Unknown",
            user_id=user.id,
            current_due_date=current_payment_date.strftime('%d.%m.%Y'),
            payment_comment=payment_comment
        )
        
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_message
        )
        
        logging.info(f"Payment request from user {user.id}: {payment_comment}")
        logging.info(f"Admin notification sent for user {user.id}")
        
    except Exception as e:
        logging.error(f"Failed to send admin notification for user {user.id}: {e}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    command = query.data
    
    logging.info(f"Button pressed: {command} from user {user.id} (@{user.username})")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if command == "my_profile":
        await handle_my_profile_button(query, context)
    elif command == "extend":
        await handle_extend_button(query, context)
    elif command == "help":
        await handle_help_button(query, context)
    elif command == "getid":
        await handle_getid_button(query, context)

async def handle_my_profile_button(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    user = query.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    payment_date = get_user_payment_date(user.id)
    keyboard = get_main_keyboard()
    
    if not payment_date:
        await query.edit_message_text(MESSAGES['not_registered'], reply_markup=keyboard)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = get_user_profile_info(user.id)
    
    if user_info:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–æ –æ–ø–ª–∞—Ç—ã
        from datetime import datetime, timedelta
        days_until_payment = (payment_date - datetime.now().date()).days
        
        if days_until_payment <= 0:
            status_emoji = "üî¥"
            status_text = "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞"
        elif days_until_payment <= 3:
            status_emoji = "üü°"
            status_text = f"–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {days_until_payment} –¥–Ω."
        else:
            status_emoji = "üü¢"
            status_text = f"–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {days_until_payment} –¥–Ω."
        
        profile_message = (
            f"üë§ **–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
            f"üÜî **ID:** {user.id}\n"
            f"üë§ **–õ–æ–≥–∏–Ω:** @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user_info['registration_date']}\n"
            f"üí≥ **–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞:** {payment_date.strftime('%d.%m.%Y')}\n"
            f"{status_emoji} **–°—Ç–∞—Ç—É—Å:** {status_text}\n\n"
            f"üí∞ **–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã:** {PAYMENT_AMOUNT}"
        )
        
        await query.edit_message_text(profile_message, reply_markup=keyboard, parse_mode='Markdown')
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ", 
            reply_markup=keyboard
        )

async def handle_extend_button(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = query.from_user
    
    current_payment_date = get_user_payment_date(user.id)
    if not current_payment_date:
        keyboard = get_main_keyboard()
        await query.edit_message_text(MESSAGES['not_registered'], reply_markup=keyboard)
        return
    
    payment_comment = generate_payment_comment(user.id)
    
    user_message = MESSAGES['payment_instruction'].format(
        amount=PAYMENT_AMOUNT,
        payment_link=PAYMENT_LINK,
        payment_comment=payment_comment
    )
    
    keyboard = get_main_keyboard()
    await query.edit_message_text(user_message, reply_markup=keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        admin_message = MESSAGES['admin_payment_notification'].format(
            username=user.username or "Unknown",
            user_id=user.id,
            current_due_date=current_payment_date.strftime('%d.%m.%Y'),
            payment_comment=payment_comment
        )
        
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_message
        )
        
        logging.info(f"Payment request from user {user.id}: {payment_comment}")
        logging.info(f"Admin notification sent for user {user.id}")
        
    except Exception as e:
        logging.error(f"Failed to send admin notification for user {user.id}: {e}")

async def handle_help_button(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    keyboard = get_main_keyboard()
    await query.edit_message_text(MESSAGES['help'], reply_markup=keyboard)

async def handle_getid_button(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è ID"""
    user = query.from_user
    
    admin_status = "üî¥ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user.id == ADMIN_CHAT_ID:
        admin_status = "üü¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    message = (
        f"üÜî –í–∞—à Telegram ID: `{user.id}`\n"
        f"üë§ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üîë –°—Ç–∞—Ç—É—Å: {admin_status}\n\n"
        f"üìù –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ: `{user.id}`"
    )
    
    if user.id == ADMIN_CHAT_ID:
        message += "\n\nüîî –ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_admin"
    
    keyboard = get_main_keyboard()
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def confirm_payment_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /confirm_payment - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /confirm_payment USER_ID"
        )
        return
    
    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    current_payment_date = get_user_payment_date(target_user_id)
    if not current_payment_date:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if update_user_payment_date(target_user_id):
        new_payment_date = get_user_payment_date(target_user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await update.message.reply_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user_id}\n"
            f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {new_payment_date.strftime('%d.%m.%Y')}",
            reply_markup=keyboard
        )
        
        keyboard = get_main_keyboard()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_notification = (
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {new_payment_date.strftime('%d.%m.%Y')}\n"
                "–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ 3 –¥–Ω—è –¥–æ —ç—Ç–æ–π –¥–∞—Ç—ã."
            )
            
            await context.bot.send_message(
                chat_id=target_user_id,
                text=user_notification,
                reply_markup=keyboard
            )
            
            logging.info(f"Admin {user.id} confirmed payment for user {target_user_id}: {current_payment_date} -> {new_payment_date}")
            
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            logging.error(f"Failed to notify user {target_user_id} about payment confirmation: {e}")
    
    else:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.")
        logging.error(f"Failed to extend subscription for user {target_user_id}")

# ========================================
# –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô
# ========================================

async def send_payment_reminders(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º)"""
    logging.info("Checking for users who need payment reminders...")
    
    users = get_users_for_reminder()
    
    if not users:
        logging.info("No users need payment reminders today")
        return
    
    logging.info(f"Found {len(users)} users who need payment reminders")
    
    for telegram_id, username, payment_due_date in users:
        try:
            due_date = datetime.strptime(payment_due_date, '%Y-%m-%d').date()
            message = MESSAGES['payment_reminder'].format(
                due_date=due_date.strftime('%d.%m.%Y')
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await context.bot.send_message(
                chat_id=telegram_id,
                text=message
            )
            
            logging.info(f"Payment reminder sent to user {telegram_id} (@{username}) for due date {due_date}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã (–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü)
            if update_user_payment_date(telegram_id):
                next_payment_date = due_date + timedelta(days=PAYMENT_PERIOD_DAYS)
                logging.info(f"Next payment date for user {telegram_id}: {next_payment_date}")
            else:
                logging.error(f"Failed to update payment date for user {telegram_id}")
            
        except Exception as e:
            logging.error(f"Failed to send reminder to {telegram_id}: {e}")

def setup_scheduler(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    scheduler = AsyncIOScheduler()
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    scheduler.add_job(
        send_payment_reminders,
        trigger=CronTrigger(hour=CHECK_TIME_HOUR, minute=0),
        args=[application],
        id='daily_payment_check',
        name='Daily Payment Reminder Check'
    )
    
    scheduler.start()
    logging.info(f"Scheduler started, checking reminders daily at {CHECK_TIME_HOUR}:00")
    
    return scheduler

# ========================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π)
# ========================================

def check_vpn_user_exists(telegram_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MVP, –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
    """
    openvpn_file = f"{OPENVPN_CONFIG_DIR}/user_{telegram_id}.ovpn"
    xray_file = f"{XRAY_CONFIG_DIR}/user_{telegram_id}.json"
    
    return os.path.exists(openvpn_file) or os.path.exists(xray_file)

# ========================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ========================================

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if BOT_TOKEN == "your_bot_token_here":
        logging.error("‚ùå BOT_TOKEN not configured! Please set your bot token in main.py")
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω BOT_TOKEN!")
        print("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª–µ main.py")
        return
    
    if ADMIN_USERNAME == "@your_telegram_username":
        logging.warning("‚ö†Ô∏è ADMIN_USERNAME not configured, using default")
    
    logging.info("üöÄ Starting VPN Payment Reminder Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("my_profile", my_profile_command))
    application.add_handler(CommandHandler("extend", extend_command))
    application.add_handler(CommandHandler("confirm_payment", confirm_payment_command))
    application.add_handler(CommandHandler("getid", get_id_command))  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    application.add_handler(CommandHandler("test_admin", test_admin_notification_command))  # –¢–µ—Å—Ç –∞–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    application.add_handler(CommandHandler("list", list_users_command))  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    application.add_handler(CommandHandler("help", help_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = setup_scheduler(application)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logging.info("‚úÖ Bot started successfully! Press Ctrl+C to stop.")
        application.run_polling()
        
    except KeyboardInterrupt:
        logging.info("üõë Bot stopped by user")
        
    except Exception as e:
        logging.error(f"‚ùå Bot crashed: {e}")
        
    finally:
        if 'scheduler' in locals():
            scheduler.shutdown()
        logging.info("üîÑ Bot shutdown complete")

if __name__ == '__main__':
    main()