#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ VPN –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
MVP –≤–µ—Ä—Å–∏—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É KISS
"""

import logging
import sqlite3
import os
from datetime import datetime, timedelta
from typing import Optional

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from logging.handlers import RotatingFileHandler

# ========================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø MVP (–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ –∫–æ–¥–µ)
# ========================================

# –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏!
BOT_TOKEN = "8244782584:AAG5UOUK-X12MoLMfBkKE53yj-hNTur3IkY"  # –ü–æ–ª—É—á–∏—Ç—å –æ—Ç @BotFather
ADMIN_USERNAME = "@pervld"  # –í–∞—à –ª–æ–≥–∏–Ω –≤ Telegram

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
DATABASE_FILE = "users.db"
PAYMENT_REMINDER_DAYS = 3  # –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å
CHECK_TIME_HOUR = 10  # –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (10:00)
PAYMENT_PERIOD_DAYS = 30  # –ü–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã (30 –¥–Ω–µ–π)

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Amnezia VPN (–¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π)
AMNEZIA_BASE_DIR = "/opt/amnezia"
OPENVPN_CONFIG_DIR = "/opt/amnezia/openvpn"  
XRAY_CONFIG_DIR = "/opt/amnezia/xray"

# ========================================
# –ü–†–ï–î–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø (–±–µ–∑ LLM)
# ========================================

MESSAGES = {
    'welcome': (
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Payment Bot!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ VPN —Å–µ—Ä–≤–∏—Å–∞.\n\n"
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /register"
    ),
    'registration_success': (
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ 3 –¥–Ω—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞.\n"
        f"–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: {{next_payment_date}}"
    ),
    'already_registered': (
        "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
        f"–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: {{next_payment_date}}"
    ),
    'payment_reminder': (
        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ VPN!\n\n"
        "–ß–µ—Ä–µ–∑ 3 –¥–Ω—è ({{due_date}}) –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤–æ–≤—Ä–µ–º—è."
    ),
    'payment_due': (
        "üö® –°–†–û–ß–ù–û: –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã VPN –∏—Å—Ç–µ–∫!\n\n"
        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {{due_date}}.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
    ),
    'help': (
        f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        f"‚Ä¢ /register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
        f"‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        f"üìû –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {ADMIN_USERNAME}"
    )
}

# ========================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø
# ========================================

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –≤–∏–¥–µ–Ω–∏—é"""
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ (10MB, 3 —Ñ–∞–π–ª–∞)
    file_handler = RotatingFileHandler(
        'bot.log', 
        maxBytes=10*1024*1024,  # 10MB
        backupCount=3,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    
    # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

# ========================================
# –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
# ========================================

def init_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            telegram_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            registration_date DATE NOT NULL,
            payment_due_date DATE NOT NULL,
            is_active BOOLEAN DEFAULT 1
        )
    ''')
    
    conn.commit()
    conn.close()
    logging.info("Database initialized successfully")

def register_user(telegram_id: int, username: str) -> bool:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, False –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    """
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (telegram_id,))
        if cursor.fetchone():
            conn.close()
            return False
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        registration_date = datetime.now().date()
        payment_due_date = registration_date + timedelta(days=PAYMENT_PERIOD_DAYS)
        
        cursor.execute('''
            INSERT INTO users (telegram_id, username, registration_date, payment_due_date)
            VALUES (?, ?, ?, ?)
        ''', (telegram_id, username, registration_date, payment_due_date))
        
        conn.commit()
        conn.close()
        
        logging.info(f"New user registered: {telegram_id} (@{username})")
        return True
        
    except sqlite3.Error as e:
        logging.error(f"Database error during registration: {e}")
        conn.close()
        return False

def get_user_payment_date(telegram_id: int) -> Optional[datetime]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    cursor.execute('SELECT payment_due_date FROM users WHERE telegram_id = ?', (telegram_id,))
    result = cursor.fetchone()
    conn.close()
    
    if result:
        return datetime.strptime(result[0], '%Y-%m-%d').date()
    return None

def get_users_for_reminder() -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    # –î–∞—Ç–∞ —á–µ—Ä–µ–∑ PAYMENT_REMINDER_DAYS –¥–Ω–µ–π
    reminder_date = (datetime.now().date() + timedelta(days=PAYMENT_REMINDER_DAYS)).strftime('%Y-%m-%d')
    
    cursor.execute('''
        SELECT telegram_id, username, payment_due_date 
        FROM users 
        WHERE payment_due_date = ? AND is_active = 1
    ''', (reminder_date,))
    
    users = cursor.fetchall()
    conn.close()
    
    return users

# ========================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ë–û–¢–ê
# ========================================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    logging.info(f"Start command from user {user.id} (@{user.username})")
    
    await update.message.reply_text(MESSAGES['welcome'])

async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register"""
    user = update.effective_user
    username = user.username or "Unknown"
    
    logging.info(f"Register command from user {user.id} (@{username})")
    
    if register_user(user.id, username):
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        payment_date = get_user_payment_date(user.id)
        message = MESSAGES['registration_success'].format(
            next_payment_date=payment_date.strftime('%d.%m.%Y')
        )
        await update.message.reply_text(message)
        
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        payment_date = get_user_payment_date(user.id)
        message = MESSAGES['already_registered'].format(
            next_payment_date=payment_date.strftime('%d.%m.%Y')
        )
        await update.message.reply_text(message)
        logging.warning(f"User {user.id} already registered")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user = update.effective_user
    
    logging.info(f"Help command from user {user.id} (@{user.username})")
    
    await update.message.reply_text(MESSAGES['help'])

# ========================================
# –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô
# ========================================

async def send_payment_reminders(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º)"""
    logging.info("Checking for users who need payment reminders...")
    
    users = get_users_for_reminder()
    
    if not users:
        logging.info("No users need payment reminders today")
        return
    
    for telegram_id, username, payment_due_date in users:
        try:
            due_date = datetime.strptime(payment_due_date, '%Y-%m-%d').date()
            message = MESSAGES['payment_reminder'].format(
                due_date=due_date.strftime('%d.%m.%Y')
            )
            
            await context.bot.send_message(
                chat_id=telegram_id,
                text=message
            )
            
            logging.info(f"Payment reminder sent to user {telegram_id} (@{username})")
            
        except Exception as e:
            logging.error(f"Failed to send reminder to {telegram_id}: {e}")

def setup_scheduler(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    scheduler = AsyncIOScheduler()
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    scheduler.add_job(
        send_payment_reminders,
        trigger=CronTrigger(hour=CHECK_TIME_HOUR, minute=0),
        args=[application],
        id='daily_payment_check',
        name='Daily Payment Reminder Check'
    )
    
    scheduler.start()
    logging.info(f"Scheduler started, checking reminders daily at {CHECK_TIME_HOUR}:00")
    
    return scheduler

# ========================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π)
# ========================================

def check_vpn_user_exists(telegram_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MVP, –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
    """
    openvpn_file = f"{OPENVPN_CONFIG_DIR}/user_{telegram_id}.ovpn"
    xray_file = f"{XRAY_CONFIG_DIR}/user_{telegram_id}.json"
    
    return os.path.exists(openvpn_file) or os.path.exists(xray_file)

# ========================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ========================================

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if BOT_TOKEN == "your_bot_token_here":
        logging.error("‚ùå BOT_TOKEN not configured! Please set your bot token in main.py")
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω BOT_TOKEN!")
        print("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª–µ main.py")
        return
    
    if ADMIN_USERNAME == "@your_telegram_username":
        logging.warning("‚ö†Ô∏è ADMIN_USERNAME not configured, using default")
    
    logging.info("üöÄ Starting VPN Payment Reminder Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("register", register_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = setup_scheduler(application)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logging.info("‚úÖ Bot started successfully! Press Ctrl+C to stop.")
        application.run_polling()
        
    except KeyboardInterrupt:
        logging.info("üõë Bot stopped by user")
        
    except Exception as e:
        logging.error(f"‚ùå Bot crashed: {e}")
        
    finally:
        if 'scheduler' in locals():
            scheduler.shutdown()
        logging.info("üîÑ Bot shutdown complete")

if __name__ == '__main__':
    main()